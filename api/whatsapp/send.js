// ========================================
// ENDPOINT: POST /api/whatsapp/send
// Envio manual de WhatsApp
// ========================================

const supabase = require('../../lib/supabase');
const { formatToE164, formatForUnnichat, formatForDisplay } = require('../../lib/phone-simple');
const { addLeadTags } = require('../../lib/tags');
const { sendMessage, updateContact } = require('../../lib/unnichat');

module.exports = async (req, res) => {
  // CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ 
      success: false, 
      error: 'M√©todo n√£o permitido' 
    });
  }

  try {
    const SIMULATION = process.env.WHATSAPP_SIMULATION_MODE === 'true' || process.env.NODE_ENV !== 'production';
    const { phone, customMessage, leadId, sendDiagnostico, sendChallenge } = req.body || {};
    
    // Determinar tipo de envio
    const messageType = sendChallenge ? 'DESAFIO' : (sendDiagnostico ? 'DIAGN√ìSTICO' : 'MENSAGEM CUSTOMIZADA');
    const typeEmoji = sendChallenge ? 'üéà' : (sendDiagnostico ? 'üìã' : 'üí¨');
    
    // Log resumido para coluna "Messages" do Vercel
    console.log(`${typeEmoji} ${messageType} | leadId: ${leadId?.substring(0, 8) || 'N/A'}... | ${SIMULATION ? 'üß™ SIM' : 'üî¥ PROD'}`);
    
    console.log('\n' + '='.repeat(70));
    console.log(`${typeEmoji} ENVIO WHATSAPP: ${messageType}`);
    console.log('='.repeat(70));
    console.log(`üéØ Modo: ${SIMULATION ? 'üß™ SIMULA√á√ÉO (n√£o envia)' : 'üî¥ PRODU√á√ÉO (envia real)'}`);
    console.log(`üì± Telefone: ${phone || 'N/A'}`);
    console.log(`üÜî Lead ID: ${leadId || 'N/A'}`);
    if (customMessage) console.log(`üí¨ Custom: ${customMessage.length} caracteres`);
    console.log('='.repeat(70));
    
    // Valida√ß√µes b√°sicas
    if (!phone && !leadId) {
      console.log('\n‚ùå ERRO: Telefone ou leadId obrigat√≥rio');
      console.log('='.repeat(70) + '\n');
      return res.status(400).json({
        success: false,
        error: 'Telefone ou leadId obrigat√≥rio'
      });
    }

    let phoneToUse = phone;
    let messagesToSend = [];
    let leadData = null;
    let referralLink = null;

    // Se forneceu leadId, buscar dados
    if (leadId) {
      console.log('\nüîç Buscando lead no banco...');
      console.log(`   ID: ${leadId}`);
      
      const { data: lead, error } = await supabase
        .from('quiz_leads')
        .select('id, celular, nome, email, diagnostico_completo, script_abertura')
        .eq('id', leadId)
        .single();
      
      if (error || !lead) {
        console.log(`\n‚ùå Lead n√£o encontrado: ${error?.message || 'ID inv√°lido'}`);
        console.log('='.repeat(70) + '\n');
        return res.status(404).json({
          success: false,
          error: 'Lead n√£o encontrado'
        });
      }
      
      leadData = lead;
      phoneToUse = lead.celular;
      
      // Log resumido para Messages
      console.log(`‚úÖ Lead encontrado: ${lead.nome} | Tel: ${lead.celular}`);
      
      console.log('‚úÖ Lead encontrado!');
      console.log(`   üë§ Nome: ${lead.nome}`);
      console.log(`   üì± Telefone: ${lead.celular}`);
      console.log(`   üìß Email: ${lead.email || 'N/A'}`);
    }

    // Processar telefone (j√° deve estar em E.164 se veio do banco)
    const phoneE164 = phoneToUse.startsWith('+') ? phoneToUse : formatToE164(phoneToUse);
    const phoneForUnnichat = formatForUnnichat(phoneE164);
    
    console.log('\nüìû Processando telefone:');
    console.log(`   Original (do banco): ${phoneToUse}`);
    console.log(`   E.164 (interno): ${phoneE164}`);
    console.log(`   Unnichat (sem +): ${phoneForUnnichat}`);
    console.log(`   Display: ${formatForDisplay(phoneE164)}`);
    console.log(`   ‚ö†Ô∏è  IMPORTANTE: Unnichat receber√°: ${phoneForUnnichat}`);

    // Preparar mensagens baseado no tipo
    if (sendChallenge) {
      // Desafio da Vitalidade (2 mensagens)
      referralLink = `https://curso.qigongbrasil.com/lead/bny-convite-wpp?utm_campaign=BNY2&utm_source=org&utm_medium=whatsapp&utm_public=${phoneE164}&utm_content=msg-inicial-desafio`;
      
      messagesToSend = [
        {
          text: `*Quer ganhar acesso ao SUPER COMBO Vital√≠cio do Mestre Ye, sem pagar nada?*

Preparamos algo muito especial para voc√™: o *Desafio da Vitalidade*.

Durante as pr√≥ximas semanas, voc√™ vai receber *miss√µes simples durante as Lives de Aquecimento da Black November da Sa√∫de Vital√≠cia*.

Cada miss√£o vai te aproximar mais do *equil√≠brio, da leveza e da vitalidade que o seu corpo merece.* üÄÑ

*Veja como participar:*

1. Compartilhe suas miss√µes no Instagram Stories e marque *@mestre_ye*;
2. Convide amigos e familiares para o evento atrav√©s do seu link √∫nico`,
          metadata: { message: 1, referral_link: referralLink }
        },
        {
          text: `Cada pessoa que se inscrever atrav√©s do seu link √∫nico aumenta suas chances de ser o grande vencedor ou vencedrora do SUPER COMBO Vital√≠cio do Mestre Ye!

*Seu link de compartilhamento*:
${referralLink}

Compartilhe vitalidade. Inspire transforma√ß√£o`,
          metadata: { message: 2, referral_link: referralLink }
        }
      ];
      
      console.log('\nüéà Desafio da Vitalidade:');
      console.log(`   üîó Link: ${referralLink}`);
      console.log(`   üìù Mensagens: 2 (${messagesToSend[0].text.length} + ${messagesToSend[1].text.length} chars)`);
      
    } else {
      // Diagn√≥stico ou mensagem customizada (1 mensagem)
      let messageText = customMessage || (leadData ? (sendDiagnostico ? (leadData.diagnostico_completo || leadData.script_abertura) : leadData.script_abertura) : '');
      
      // Adicionar pergunta de feedback no final do diagn√≥stico
      if (sendDiagnostico && messageText) {
        messageText = messageText.trim() + '\n\nFez sentido esse Diagn√≥stico para voc√™? üôè';
      }
      
      messagesToSend = [
        {
          text: messageText,
          metadata: { tipo: sendDiagnostico ? 'diagnostico_completo' : 'custom' }
        }
      ];
      
      console.log(`\n${sendDiagnostico ? 'ÔøΩ' : 'üí¨'} Mensagem preparada:`);
      console.log(`   üìè Tamanho: ${messageText.length} caracteres`);
      console.log(`   üìÑ Preview: ${messageText.substring(0, 100)}...`);
    }

    // SIMULA√á√ÉO (staging/dev): n√£o exige UNNICHAT_*, apenas registra sucesso
    if (SIMULATION) {
      console.log('\nüß™ MODO SIMULA√á√ÉO ATIVO');
      console.log(`   ‚ö†Ô∏è  N√£o enviar√° para Unnichat (apenas registro no banco)`);
      console.log(`   üìä Mensagens a simular: ${messagesToSend.length}`);
      
      try {
        if (leadId) {
          console.log('\nüíæ Registrando no banco...');
          
          const newStatus = sendChallenge ? 'desafio_enviado' : 'diagnostico_enviado';
          const newTag = sendChallenge ? 'desafio_enviado' : 'diagnostico_enviado';
          
          await supabase
            .from('quiz_leads')
            .update({ 
              whatsapp_status: newStatus, 
              whatsapp_sent_at: new Date().toISOString() 
            })
            .eq('id', leadId);
          
          console.log(`   ‚úÖ Status atualizado: ${newStatus}`);
          
          try { 
            await addLeadTags(supabase, leadId, [newTag]); 
            console.log(`   üè∑Ô∏è  Tag adicionada: ${newTag}`);
          } catch (e) {
            console.log(`   ‚ö†Ô∏è  Tag falhou: ${e.message}`);
          }

          // Registrar logs para cada mensagem
          const logsToInsert = messagesToSend.map(msg => ({
            lead_id: leadId,
            phone: phoneE164,
            status: 'simulated',
            metadata: { 
              route: 'api/whatsapp/send', 
              simulated: true, 
              messageType,
              ...msg.metadata
            },
            sent_at: new Date().toISOString()
          }));
          
          await supabase.from('whatsapp_logs').insert(logsToInsert);
          
          console.log(`   ‚úÖ Logs inseridos: ${messagesToSend.length} mensagem(ns)`);
        }
      } catch (e) {
        console.log(`\n‚ö†Ô∏è  Erro ao registrar simula√ß√£o: ${e.message}`);
      }
      
      // Log resumido para Messages
      console.log(`üß™ SIMULADO: ${messagesToSend.length} msg(s) para ${leadData?.nome || phoneE164} | ${messageType}`);
      
      console.log(`\n${'='.repeat(70)}`);
      console.log(`${typeEmoji} SIMULA√á√ÉO CONCLU√çDA COM SUCESSO`);
      console.log('='.repeat(70) + '\n');
      return res.status(200).json({ 
        success: true, 
        message: `${messageType} simulado (staging/dev)`, 
        phone: phoneE164, 
        simulation: true,
        messages_sent: messagesToSend.length
      });
    }

    // Produ√ß√£o: exigir UNNICHAT_*
    console.log('\nüî¥ MODO PRODU√á√ÉO - Enviando via Unnichat');
    
    if (!process.env.UNNICHAT_ACCESS_TOKEN) {
      console.log('\n‚ùå ERRO: UNNICHAT_ACCESS_TOKEN n√£o configurado');
      console.log('='.repeat(70) + '\n');
      return res.status(500).json({ success: false, error: 'WhatsApp n√£o configurado (UNNICHAT_ACCESS_TOKEN ausente)' });
    }
    if (!process.env.UNNICHAT_API_URL) {
      console.log('\n‚ùå ERRO: UNNICHAT_API_URL n√£o configurado');
      console.log('='.repeat(70) + '\n');
      return res.status(500).json({ success: false, error: 'WhatsApp n√£o configurado (UNNICHAT_API_URL ausente)' });
    }
    
    // Criar/atualizar contato antes (best-effort)
    try {
      if (leadId && leadData) {
        console.log('\nüìù Atualizando contato no Unnichat...');
        const tags = sendChallenge ? ['desafio_vitalidade'] : ['manual_send'];
        await updateContact(leadData.nome, phoneForUnnichat, leadData.email || `${phoneE164.replace('+', '')}@placeholder.com`, tags);
        console.log('   ‚úÖ Contato atualizado');
        console.log('   ‚è≥ Aguardando 800ms...');
        await new Promise(r => setTimeout(r, 800));
      }
    } catch (e) {
      console.log(`   ‚ö†Ô∏è  Erro ao atualizar contato: ${e.message}`);
    }

    // Enviar mensagens
    const DELAY_BETWEEN_MESSAGES = 2000; // 2 segundos
    let messagesSent = 0;
    
    console.log(`\nüì§ Iniciando envio de ${messagesToSend.length} mensagem(ns)...`);
    console.log('-'.repeat(70));
    
    for (let i = 0; i < messagesToSend.length; i++) {
      const msg = messagesToSend[i];
      const msgNum = i + 1;
      const totalMsgs = messagesToSend.length;
      
      console.log(`\nüì® Mensagem ${msgNum}/${totalMsgs}:`);
      console.log(`   üìè Tamanho: ${msg.text.length} chars`);
      console.log(`   üì§ Enviando para Unnichat: ${phoneForUnnichat}`);
      console.log(`   üîç Verificar: N√ÉO deve ter + no n√∫mero acima`);
      
      await sendMessage(phoneForUnnichat, msg.text);
      messagesSent++;
      
      console.log(`   ‚úÖ Enviada com sucesso!`);
      
      // Aguardar antes da pr√≥xima mensagem (se houver)
      if (i < messagesToSend.length - 1) {
        console.log(`   ‚è≥ Aguardando ${DELAY_BETWEEN_MESSAGES/1000}s antes da pr√≥xima...`);
        await new Promise(r => setTimeout(r, DELAY_BETWEEN_MESSAGES));
      }
    }
    
    console.log('\n' + '-'.repeat(70));
    console.log(`‚úÖ Total enviado: ${messagesSent}/${messagesToSend.length} mensagem(ns)`);
    
    // Atualiza√ß√µes p√≥s-envio
    try {
      if (leadId) {
        console.log('\nüíæ Registrando no banco de dados...');
        
        const newStatus = sendChallenge ? 'desafio_enviado' : 'diagnostico_enviado';
        const newTag = sendChallenge ? 'desafio_enviado' : 'diagnostico_enviado';
        
        await supabase
          .from('quiz_leads')
          .update({ 
            whatsapp_status: newStatus, 
            whatsapp_sent_at: new Date().toISOString() 
          })
          .eq('id', leadId);
        
        console.log(`   ‚úÖ Status atualizado: ${newStatus}`);
        
        try { 
          await addLeadTags(supabase, leadId, [newTag]); 
          console.log(`   üè∑Ô∏è  Tag adicionada: ${newTag}`);
        } catch (e) {
          console.log(`   ‚ö†Ô∏è  Tag falhou: ${e.message}`);
        }
        
        // Registrar logs para cada mensagem
        const logsToInsert = messagesToSend.map(msg => ({
          lead_id: leadId,
          phone: phoneE164,
          status: 'sent',
          metadata: { 
            route: 'api/whatsapp/send', 
            messageType,
            ...msg.metadata
          },
          sent_at: new Date().toISOString()
        }));
        
        await supabase.from('whatsapp_logs').insert(logsToInsert);
        
        console.log(`   ‚úÖ Logs inseridos: ${messagesSent} registro(s)`);
      }
    } catch (e) {
      console.log(`\n‚ö†Ô∏è  Erro ao registrar p√≥s-envio: ${e.message}`);
    }

    // Log resumido para Messages
    console.log(`‚úÖ ENVIADO: ${messagesSent} msg(s) para ${leadData?.nome || phoneE164} | ${messageType}`);
    
    console.log('\n' + '='.repeat(70));
    console.log(`${typeEmoji} ENVIO CONCLU√çDO COM SUCESSO`);
    console.log('='.repeat(70) + '\n');
    
    return res.status(200).json({ 
      success: true, 
      message: `${messageType} enviado com sucesso`, 
      phone: phoneE164,
      messages_sent: messagesSent,
      ...(referralLink && { referral_link: referralLink })
    });
    
  } catch (error) {
    console.error('\n' + '='.repeat(70));
    console.error('‚ùå ERRO NO ENVIO WHATSAPP');
    console.error('='.repeat(70));
    console.error(`üìõ Tipo: ${error.constructor.name}`);
    console.error(`üí¨ Mensagem: ${error.message}`);
    console.error(`üìö Stack:\n${error.stack}`);
    console.error('='.repeat(70) + '\n');
    
    return res.status(500).json({
      success: false,
      error: error.message
    });
  }
};