// ========================================
// WEBHOOK: Ver Resultados (Vercel Serverless)
// URL: /api/webhook-ver-resultados
// ========================================

const { findLeadByPhone, formatForUnnichat } = require('../../../lib/phone-simple');
const supabase = require('../../../lib/supabase');
const { addLeadTags } = require('../../../lib/tags');

const UNNICHAT_API_URL = process.env.UNNICHAT_API_URL || 'https://unnichat.com.br/api';
const UNNICHAT_TOKEN = process.env.UNNICHAT_ACCESS_TOKEN;
const DEBUG = process.env.WHATSAPP_DEBUG === 'true' || process.env.NODE_ENV !== 'production';
const SIMULATION = process.env.WHATSAPP_SIMULATION_MODE === 'true' || process.env.NODE_ENV !== 'production';

// Usa util compartilhado em lib/phone para garantir consist√™ncia entre API e serverless
const logger = require('../../../lib/logger');

module.exports = async (req, res) => {
  // CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const reqId = logger && typeof logger.mkid === 'function' ? logger.mkid() : `req-${Date.now()}`;
    if (DEBUG) {
      const safePreview = { ...req.body };
      if (safePreview.phone) safePreview.phone = '[REDACTED]';
      if (safePreview.from) safePreview.from = '[REDACTED]';
      if (safePreview.contact?.phone) safePreview.contact.phone = '[REDACTED]';
      if (safePreview.contact?.email) safePreview.contact.email = '[REDACTED]';
      logger.info && logger.info(reqId, 'ÔøΩ WEBHOOK RECEBIDO (resumo payload)', safePreview);
    }
    
    const webhookData = req.body;
    
    // Extrair dados do webhook
    let phoneFromWebhook = 
      webhookData.phone || 
      webhookData.from || 
      webhookData.contact?.phone ||
      webhookData.number ||
      webhookData.phoneNumber;
    
    const emailFromWebhook = webhookData.email || webhookData.contact?.email;
    const nameFromWebhook = webhookData.name || webhookData.contact?.name;
    
    if (DEBUG) {
      logger.info && logger.info(reqId, 'üì±/üìß/üë§ Dados do webhook (presen√ßa)', { hasPhone: !!phoneFromWebhook, hasEmail: !!emailFromWebhook, name: nameFromWebhook || null });
    }
    
    // Buscar lead usando fun√ß√£o simplificada
    if (DEBUG) {
      logger.info && logger.info(reqId, 'ÔøΩ Buscando lead', { phone: phoneFromWebhook, email: emailFromWebhook });
    }
    
    const lead = await findLeadByPhone(supabase, phoneFromWebhook, emailFromWebhook);

    // ========================================
    // M√âTODO 1.5: HEUR√çSTICA 9¬∫ D√çGITO (celular antigo ‚Üî novo)
    // ========================================
    // Tentativa 5: Quando temos 10 d√≠gitos (DDD + 8), tentar tamb√©m com 9 na frente
    if (!lead && phoneClean.length === 10) {
      const ddd = phoneClean.substring(0, 2);
      const numeroLocal = phoneClean.substring(2);
      
      if (!numeroLocal.startsWith('9')) {
        const comNove = `${ddd}9${numeroLocal}`;
        if (DEBUG) console.log('üîç Tentativa 5: Heur√≠stica 9¬∫ d√≠gito - tentando com 9 na frente:', comNove);
        
        const { data: leadCom9 } = await supabase
          .from('quiz_leads')
          .select('*')
          .eq('celular', comNove)
          .maybeSingle();
        
        if (leadCom9) {
          lead = leadCom9;
          logger.info && logger.info(reqId, '‚úÖ Lead encontrado com 9¬∫ d√≠gito adicionado!', { 
            nome: lead.nome, 
            id: lead.id,
            celularEncontrado: lead.celular,
            celularRecebido: phoneClean
          });
        }
      }
    }

    // Tentativa 6: Quando temos 11 d√≠gitos, tentar SEM o 9
    if (!lead && phoneClean.length === 11) {
      const ddd = phoneClean.substring(0, 2);
      const numeroLocal = phoneClean.substring(2);
      
      if (numeroLocal.startsWith('9')) {
        const semNove = `${ddd}${numeroLocal.substring(1)}`;
        if (DEBUG) console.log('üîç Tentativa 6: Heur√≠stica 9¬∫ d√≠gito - tentando sem o 9:', semNove);
        
        const { data: leadSem9 } = await supabase
          .from('quiz_leads')
          .select('*')
          .eq('celular', semNove)
          .maybeSingle();
        
        if (leadSem9) {
          lead = leadSem9;
          logger.info && logger.info(reqId, '‚úÖ Lead encontrado sem 9¬∫ d√≠gito!', { 
            nome: lead.nome, 
            id: lead.id,
            celularEncontrado: lead.celular,
            celularRecebido: phoneClean
          });
        }
      }
    }
    
    // ========================================
    // M√âTODO 2: FALLBACK POR EMAIL
    // ========================================
    if (!lead && emailFromWebhook) {
  if (DEBUG) logger.info && logger.info(reqId, 'üîç Fallback: Buscando por email', { email: emailFromWebhook });
      
      const { data: leadByEmail } = await supabase
        .from('quiz_leads')
        .select('*')
        .eq('email', emailFromWebhook)
        .maybeSingle();
      
      if (leadByEmail) {
        lead = leadByEmail;
        logger.info && logger.info(reqId, '‚úÖ Lead encontrado por EMAIL', { nome: lead.nome, id: lead.id });
      }
    }

    // ‚ùå Se n√£o encontrou, retornar erro
    // IMPORTANTE: N√ÉO usar fallback gen√©rico para evitar enviar diagn√≥stico para pessoa errada
    // 
    // ESTRAT√âGIA DE BUSCA:
    // 1. Busca exata pelo telefone normalizado (sem DDI)
    // 2. Busca pelos √∫ltimos 10 d√≠gitos (cobre casos com 9 extra)
    // 3. Busca pelos √∫ltimos 9 d√≠gitos (cobre varia√ß√µes de DDI/DDD)
    // 4. Busca pelos √∫ltimos 8 d√≠gitos (cobre fixos e celulares antigos)
    // 5. Heur√≠stica 9¬∫ d√≠gito: tenta adicionar/remover o 9 (celular antigo ‚Üî novo)
    // 6. Busca por email (se fornecido)
    // 
    // Se nenhum m√©todo funcionar, retornamos 404 para evitar envio errado
    if (!lead) {
      logger.error && logger.error(reqId, '‚ùå ERRO: Nenhum lead identificado!', { phoneFromWebhook, normalized: phoneFromWebhook ? normalizePhone(phoneFromWebhook) : null, emailFromWebhook, nameFromWebhook });
      return res.status(404).json({ 
        success: false, 
        message: 'Lead n√£o identificado. Verifique se o telefone est√° cadastrado corretamente.' 
      });
    }

    // Determinar qual m√©todo encontrou o lead
    let metodoEncontrado = 'desconhecido';
    if (lead) {
      if (lead.celular === phoneClean) {
        metodoEncontrado = '1-busca-exata';
      } else if (phoneClean.length >= 10 && lead.celular.includes(phoneClean.slice(-10))) {
        metodoEncontrado = '2-ultimos-10-digitos';
      } else if (phoneClean.length >= 9 && lead.celular.includes(phoneClean.slice(-9))) {
        metodoEncontrado = '3-ultimos-9-digitos';
      } else if (phoneClean.length >= 8 && lead.celular.includes(phoneClean.slice(-8))) {
        metodoEncontrado = '4-ultimos-8-digitos';
      } else if (phoneClean.length === 10 && lead.celular === `${phoneClean.substring(0,2)}9${phoneClean.substring(2)}`) {
        metodoEncontrado = '5-heuristica-adicionar-9';
      } else if (phoneClean.length === 11 && lead.celular === `${phoneClean.substring(0,2)}${phoneClean.substring(3)}`) {
        metodoEncontrado = '6-heuristica-remover-9';
      } else if (emailFromWebhook && lead.email === emailFromWebhook) {
        metodoEncontrado = '7-fallback-email';
      }
    }

    if (DEBUG) {
      logger.info && logger.info(reqId, '‚úÖ LEAD IDENTIFICADO', { 
        nome: lead.nome, 
        celular: lead.celular, 
        elemento: lead.elemento_principal,
        metodoEncontrado: metodoEncontrado,
        telefoneRecebido: phoneFromWebhook,
        telefoneNormalizado: phoneClean
      });
    }

    // Preparar telefone para Unnichat (normaliza + adiciona DDI 55 somente uma vez)
    const normalizedDbPhone = normalizePhone(lead.celular);
    const phoneForUnnichat = formatPhoneForUnnichat(normalizedDbPhone);

  // Log detalhado antes do envio para facilitar correla√ß√£o com Unnichat
  logger.info && logger.info(reqId, 'üì≤ phoneForUnnichat', { phoneForUnnichat, normalizedDbPhone });

    // Se detectar diverg√™ncia (ex.: n√∫mero salvo com 55 ou com espa√ßos), corrigir no banco
    if (normalizedDbPhone && normalizedDbPhone !== lead.celular) {
      try {
        await supabase
          .from('quiz_leads')
          .update({ celular: normalizedDbPhone, updated_at: new Date().toISOString() })
          .eq('id', lead.id);
  if (DEBUG) logger.info && logger.info(reqId, 'üõ†Ô∏è Telefone do lead normalizado no banco', { before: lead.celular, after: normalizedDbPhone });
        // refletir em mem√≥ria para logs consistentes
        lead.celular = normalizedDbPhone;
      } catch (e) {
        logger.error && logger.error(reqId, '‚ö†Ô∏è N√£o foi poss√≠vel atualizar telefone normalizado no banco', e.message);
      }
    }

    // Atualizar contato
    try {
      const contactResp = await fetch(`${UNNICHAT_API_URL}/contact`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${UNNICHAT_TOKEN}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name: lead.nome,
          phone: phoneForUnnichat,
          email: lead.email || `${lead.celular}@placeholder.com`,
          tags: ['quiz_resultados_enviados']
        })
      });
      let contactJson = null;
      try { contactJson = await contactResp.json(); } catch (e) { contactJson = { raw: 'non-json response' }; }
      logger.info && logger.info(reqId, 'Contato atualizado (Unnichat)', { status: contactResp.status, body: contactJson });
      await new Promise(resolve => setTimeout(resolve, 1000));
    } catch (error) {
      logger.error && logger.error(reqId, '‚ö†Ô∏è Aviso contato (updateContact) falhou', error.message);
    }

    // Preparar diagn√≥stico
    const primeiroNome = lead.nome.split(' ')[0];
    const diagnosticoCompleto = lead.diagnostico_completo || 
      'Seu diagn√≥stico est√° sendo processado. Em breve voc√™ receber√° todas as informa√ß√µes!';

    const diagnosticoFormatado = diagnosticoCompleto
      .replace(/üî• DIAGN√ìSTICO:/g, '*üî• DIAGN√ìSTICO:*')
      .replace(/O que seu corpo est√° dizendo:/g, '*O que seu corpo est√° dizendo:*')
      .replace(/Por que isso est√° acontecendo:/g, '*Por que isso est√° acontecendo:*')
      .replace(/A boa not√≠cia:/g, '*A boa not√≠cia:*')
      .replace(/O que voc√™ pode fazer:/g, '*O que voc√™ pode fazer:*')
      .replace(/üéØ PR√ìXIMO PASSO ESSENCIAL:/g, '*üéØ PR√ìXIMO PASSO ESSENCIAL:*');

    const mensagem = `
Ol√° ${primeiroNome}! üëã

${diagnosticoFormatado}

Fez sentido esse Diagn√≥stico para voc√™? üôè
    `.trim();

  if (DEBUG) logger.info && logger.info(reqId, 'üì® Enviando diagn√≥stico...');
    
    // SIMULA√á√ÉO (staging/dev): n√£o envia para Unnichat, mas atualiza DB e logs
    if (SIMULATION) {
      try {
        await supabase
          .from('quiz_leads')
          .update({ whatsapp_status: 'diagnostico_enviado', whatsapp_sent_at: new Date().toISOString() })
          .eq('id', lead.id);
        try { await addLeadTags(supabase, lead.id, ['diagnostico_enviado']); } catch (e) {}
        await supabase.from('whatsapp_logs').insert({
          lead_id: lead.id,
          phone: lead.celular,
          status: 'simulated',
          metadata: { action: 'ver_resultados', simulated: true },
          sent_at: new Date().toISOString()
        });
      } catch (e) { console.log('‚ö†Ô∏è Falha ao registrar simula√ß√£o:', e.message); }
      return res.json({ success: true, message: 'Resultados simulados (staging/dev)', leadId: lead.id, leadName: lead.nome, simulation: true });
    }
    
    // Enviar diagn√≥stico (com 1 retry em caso de 'Contact not found')
    async function sendOnce() {
      const resp = await fetch(`${UNNICHAT_API_URL}/meta/messages`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${UNNICHAT_TOKEN}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ phone: phoneForUnnichat, messageText: mensagem })
      });
      const json = await resp.json();
      return json;
    }

  let msgResult = await sendOnce();
    if (msgResult && msgResult.message && /Contact not found/i.test(msgResult.message)) {
  if (DEBUG) logger.info && logger.info(reqId, 'üîÅ Retry ap√≥s "Contact not found" (for√ßando atualiza√ß√£o de contato)');
      try {
        await fetch(`${UNNICHAT_API_URL}/contact`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${UNNICHAT_TOKEN}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            name: lead.nome,
            phone: phoneForUnnichat,
            email: lead.email || `${lead.celular}@placeholder.com`,
            tags: ['quiz_resultados_enviados','auto_retry']
          })
        });
        await new Promise(r => setTimeout(r, 800));
      } catch (e) {
        logger.error && logger.error(reqId, '‚ö†Ô∏è Falha ao atualizar contato no retry', e.message);
      }
      msgResult = await sendOnce();
    }

    logger.info && logger.info(reqId, 'Unnichat send result', msgResult);
    if (msgResult.code && msgResult.code !== '200') {
      logger.error && logger.error(reqId, '‚ùå Erro ao enviar', msgResult);
      throw new Error(msgResult.message || 'Erro ao enviar mensagem');
    }

  if (DEBUG) logger.info && logger.info(reqId, '‚úÖ Diagn√≥stico enviado com sucesso!');

    // Atualizar status e tags
    try {
      await supabase
        .from('quiz_leads')
        .update({
          whatsapp_status: 'diagnostico_enviado',
          whatsapp_sent_at: new Date().toISOString()
        })
        .eq('id', lead.id);
      try { await addLeadTags(supabase, lead.id, ['diagnostico_enviado']); } catch (e) { logger.error && logger.error(reqId, 'Falha ao addLeadTags', e.message); }

      // Registrar log
      const { error: logErr } = await supabase.from('whatsapp_logs').insert({
        lead_id: lead.id,
        phone: lead.celular,
        status: 'diagnostico_enviado',
        metadata: { 
          action: 'ver_resultados',
          unnichat_response: msgResult,
          triggered_by_webhook: true,
          webhook_payload: webhookData,
          metodo_busca: metodoEncontrado,
          telefone_recebido: phoneFromWebhook,
          telefone_normalizado: phoneClean,
          estrategia_busca: '6 tentativas: (1)exata, (2)ultimos-10, (3)ultimos-9, (4)ultimos-8, (5)add-9, (6)remove-9, (7)email'
        },
        sent_at: new Date().toISOString()
      });
      if (logErr) logger.error && logger.error(reqId, 'Falha ao inserir whatsapp_logs', logErr.message);
  else logger.info && logger.info(reqId, 'üìÉ DIAGN√ìSTICO ENVIADO | whatsapp_logs inserido', { leadId: lead.id });
    } catch (e) {
      logger.error && logger.error(reqId, 'Erro atualizando lead ou registrando log', e.message);
    }

    res.json({ 
      success: true, 
      message: 'Resultados enviados',
      leadId: lead.id,
      leadName: lead.nome
    });

  } catch (error) {
    console.error('‚ùå Erro no webhook:', error.message);
    res.status(500).json({ success: false, error: error.message });
  }
};