// enviar-campanhas-lotes.js - COM PAGINA√á√ÉO COMPLETA
const { createClient } = require('@supabase/supabase-js');

// ========================================
// CONFIGURA√á√ÉO DE AMBIENTE
// ========================================
const isProduction = process.env.NODE_ENV === 'production';
const envFile = isProduction ? '.env.production' : '.env.local';

require('dotenv').config({ path: envFile });

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const GATILHO_URL = process.env.UNNICHAT_GATILHO_URL;

// Configura√ß√µes de lote
const LOTE_SIZE = parseInt(process.env.LOTE_SIZE) || 10;
const DELAY_ENTRE_ENVIOS = parseInt(process.env.DELAY_ENTRE_ENVIOS) || 4000;
const DELAY_ENTRE_LOTES = parseInt(process.env.DELAY_ENTRE_LOTES) || 30000;

// üîí LIMITE PARA TESTE (mude para null para enviar todos)
const LIMITE_TESTE = 500;

// Validar vari√°veis cr√≠ticas
if (!supabaseUrl || !supabaseKey || !GATILHO_URL) {
  console.error('‚ùå ERRO: Vari√°veis de ambiente n√£o configuradas!');
  console.error('   Verifique: SUPABASE_URL, SUPABASE_KEY, UNNICHAT_GATILHO_URL');
  console.error('   Arquivo:', envFile);
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// ========================================
// FUN√á√ÉO: BUSCAR TODOS OS LEADS (COM PAGINA√á√ÉO)
// ========================================
async function buscarTodosLeads() {
  console.log('üîç Buscando total de leads...');
  
  // Primeiro, contar quantos existem
  const { count } = await supabase
    .from('quiz_leads')
    .select('*', { count: 'exact', head: true })
    .not('celular', 'is', null);
  
  console.log(`üìä Total de leads com telefone: ${count}`);
  
  // Buscar todos em lotes de 1000
  let allLeads = [];
  let offset = 0;
  const BATCH_SIZE = 1000;
  
  while (offset < count) {
    console.log(`   Carregando leads ${offset + 1} a ${Math.min(offset + BATCH_SIZE, count)}...`);
    
    const { data, error } = await supabase
      .from('quiz_leads')
      .select('*')
      .not('celular', 'is', null)
      .order('lead_score', { ascending: true }) // Menor score primeiro
      .range(offset, offset + BATCH_SIZE - 1);
    
    if (error) {
      console.error('‚ùå Erro ao buscar leads:', error.message);
      throw error;
    }
    
    allLeads = allLeads.concat(data);
    offset += BATCH_SIZE;
  }
  
  console.log(`‚úÖ Total carregado: ${allLeads.length} leads\n`);
  return allLeads;
}

// ========================================
// FUN√á√ÉO PRINCIPAL
// ========================================
async function enviarEmLotes() {
  console.log('\nüöÄ ========================================');
  console.log('   CAMPANHA DE ENVIO EM MASSA - Quiz MTC');
  console.log('========================================');
  console.log('üîß Ambiente:', isProduction ? 'üî¥ PRODU√á√ÉO' : 'üü° TESTE');
  console.log('üì¶ Tamanho do lote:', LOTE_SIZE, 'leads');
  console.log('‚è±Ô∏è  Delay entre envios:', DELAY_ENTRE_ENVIOS/1000 + 's');
  console.log('‚è∏Ô∏è  Delay entre lotes:', DELAY_ENTRE_LOTES/1000 + 's');
  console.log('üîó Gatilho:', GATILHO_URL.substring(0, 50) + '...');
  
  if (LIMITE_TESTE) {
    console.log('üîí MODO TESTE: Limite de', LIMITE_TESTE, 'leads');
  }
  
  console.log('========================================\n');
  
  // BUSCAR TODOS OS LEADS (COM PAGINA√á√ÉO)
  const allLeads = await buscarTodosLeads();
  
  // Filtrar apenas os que n√£o receberam ainda
  const leadsElegiveis = allLeads.filter(lead => 
    !lead.whatsapp_status || 
    lead.whatsapp_status === 'AGUARDANDO_CONTATO' ||
    lead.whatsapp_status === 'failed'
  );
  
  console.log(`üìã Leads eleg√≠veis (n√£o enviados): ${leadsElegiveis.length}\n`);
  
  if (!leadsElegiveis || leadsElegiveis.length === 0) {
    console.log('‚úÖ Nenhum lead eleg√≠vel encontrado!');
    console.log('üí° Todos os leads j√° receberam o template.\n');
    return;
  }
  
  // üîí APLICAR LIMITE DE TESTE
  const leadsParaEnviar = LIMITE_TESTE 
    ? leadsElegiveis.slice(0, LIMITE_TESTE) 
    : leadsElegiveis;
  
  console.log(`‚úÖ ${leadsParaEnviar.length} leads selecionados para envio!\n`);
  
  if (LIMITE_TESTE && leadsElegiveis.length > LIMITE_TESTE) {
    console.log(`‚ö†Ô∏è  ATEN√á√ÉO: Modo teste ativo!`);
    console.log(`   Enviando para ${LIMITE_TESTE} de ${leadsElegiveis.length} leads eleg√≠veis\n`);
  }
  
  console.log('üìã Primeiros 10 leads que receber√£o template:');
  leadsParaEnviar.slice(0, 10).forEach((lead, i) => {
    console.log(`   ${i+1}. ${lead.nome} - ${lead.celular} - Score: ${lead.lead_score} - ${lead.elemento_principal || 'N/A'}`);
  });
  
  if (leadsParaEnviar.length > 10) {
    console.log(`   ... e mais ${leadsParaEnviar.length - 10} leads`);
  }
  console.log('');
  
  // ========================================
  // CONFIRMA√á√ÉO DE SEGURAN√áA
  // ========================================
  const totalLotes = Math.ceil(leadsParaEnviar.length / LOTE_SIZE);
  const tempoEstimadoMinutos = Math.ceil(
    (leadsParaEnviar.length * DELAY_ENTRE_ENVIOS + totalLotes * DELAY_ENTRE_LOTES) / 60000
  );
  
  console.log('\n‚ö†Ô∏è  ========================================');
  console.log('   CONFIRMA√á√ÉO DE ENVIO');
  console.log('========================================');
  console.log('üìä Total de leads:', leadsParaEnviar.length);
  console.log('üì¶ Total de lotes:', totalLotes);
  console.log('‚è±Ô∏è  Tempo estimado:', tempoEstimadoMinutos, 'minutos');
  console.log('üî• Ambiente:', isProduction ? 'PRODU√á√ÉO (REAL)' : 'TESTE');
  
  if (LIMITE_TESTE) {
    console.log('üîí Modo:', 'TESTE - Limite de', LIMITE_TESTE, 'leads');
  } else {
    console.log('üö® Modo:', 'ENVIO TOTAL');
  }
  
  console.log('========================================\n');
  
  if (leadsParaEnviar.length > 5 && !LIMITE_TESTE) {
    console.log('üí° DICAS IMPORTANTES:');
    console.log('   ‚Ä¢ Mantenha este terminal aberto');
    console.log('   ‚Ä¢ Mantenha internet est√°vel');
    console.log('   ‚Ä¢ Pode pausar com Ctrl+C e retomar depois');
    console.log('   ‚Ä¢ Os leads j√° enviados n√£o ser√£o enviados novamente\n');
    
    console.log('‚è≥ Iniciando em 10 segundos...\n');
    await new Promise(resolve => setTimeout(resolve, 10000));
  } else {
    console.log('‚è≥ Iniciando em 3 segundos...\n');
    await new Promise(resolve => setTimeout(resolve, 3000));
  }
  
  // ========================================
  // PROCESSAR ENVIOS
  // ========================================
  let totalEnviados = 0;
  let totalErros = 0;
  const inicioCampanha = new Date();
  
  console.log('üöÄ INICIANDO ENVIOS...\n');
  
  for (let i = 0; i < totalLotes; i++) {
    const loteAtual = i + 1;
    const inicio = i * LOTE_SIZE;
    const fim = Math.min((i + 1) * LOTE_SIZE, leadsParaEnviar.length);
    const leadsLote = leadsParaEnviar.slice(inicio, fim);
    
    console.log(`\nüì¶ ========================================`);
    console.log(`   LOTE ${loteAtual}/${totalLotes} (${leadsLote.length} leads)`);
    console.log(`========================================\n`);
    
    // Enviar cada lead do lote
    for (const lead of leadsLote) {
      console.log(`üë§ ${lead.nome}`);
      console.log(`   üì± ${lead.celular}`);
      console.log(`   üìä Score: ${lead.lead_score} | üéØ ${lead.elemento_principal || 'N/A'}`);
      
      try {
        const phoneForUnnichat = `55${lead.celular}`;
        
        const response = await fetch(GATILHO_URL, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            name: lead.nome,
            email: lead.email || `${lead.celular}@placeholder.com`,
            phone: phoneForUnnichat
          })
        });
        
        const result = await response.json();
        
        if (response.ok || result.success) {
          console.log(`   ‚úÖ Template enviado!\n`);
          totalEnviados++;
          
          // Atualizar status no Supabase
          await supabase
            .from('quiz_leads')
            .update({
              whatsapp_status: 'template_enviado',
              whatsapp_sent_at: new Date().toISOString(),
              whatsapp_attempts: (lead.whatsapp_attempts || 0) + 1
            })
            .eq('id', lead.id);
          
          // Registrar log
          await supabase.from('whatsapp_logs').insert({
            lead_id: lead.id,
            phone: lead.celular,
            status: 'template_enviado',
            metadata: { gatilho_response: result },
            sent_at: new Date().toISOString()
          });
            
        } else {
          throw new Error(result.message || 'Erro desconhecido');
        }
        
      } catch (error) {
        console.log(`   ‚ùå Erro: ${error.message}`);
        totalErros++;
        
        // Salvar erro no banco
        await supabase
          .from('quiz_leads')
          .update({
            whatsapp_status: 'failed',
            whatsapp_error: error.message,
            whatsapp_attempts: (lead.whatsapp_attempts || 0) + 1
          })
          .eq('id', lead.id);
      }
      
      // Aguardar antes do pr√≥ximo envio (exceto √∫ltimo do lote)
      if (leadsLote.indexOf(lead) < leadsLote.length - 1) {
        await new Promise(resolve => setTimeout(resolve, DELAY_ENTRE_ENVIOS));
      }
    }
    
    // Checkpoint ap√≥s cada lote
    console.log(`\nüíæ Checkpoint: ${totalEnviados}/${leadsParaEnviar.length} enviados`);
    console.log(`   ‚úÖ Sucesso: ${totalEnviados} | ‚ùå Erros: ${totalErros}`);
    
    if (totalEnviados + totalErros > 0) {
      console.log(`   üìä Taxa: ${((totalEnviados / (totalEnviados + totalErros)) * 100).toFixed(1)}%`);
    }
    
    // Pausa extra a cada 50 leads
    if (totalEnviados % 50 === 0 && totalEnviados > 0 && loteAtual < totalLotes) {
      console.log('\nüîÑ Checkpoint de 50 leads! Pausa extra de 60s...');
      await new Promise(resolve => setTimeout(resolve, 60000));
    }
    
    // Aguardar entre lotes (exceto √∫ltimo)
    if (loteAtual < totalLotes) {
      console.log(`\n‚è∏Ô∏è  Pausa entre lotes: ${DELAY_ENTRE_LOTES/1000}s`);
      await new Promise(resolve => setTimeout(resolve, DELAY_ENTRE_LOTES));
    }
  }
  
  // ========================================
  // RELAT√ìRIO FINAL
  // ========================================
  const fimCampanha = new Date();
  const duracaoMinutos = Math.round((fimCampanha - inicioCampanha) / 60000);
  const duracaoSegundos = Math.round((fimCampanha - inicioCampanha) / 1000);
  
  console.log('\n\nüéâ ========================================');
  console.log('   CAMPANHA FINALIZADA!');
  console.log('========================================');
  console.log('‚úÖ Total enviados:', totalEnviados);
  console.log('‚ùå Total erros:', totalErros);
  console.log('üìä Taxa de sucesso:', ((totalEnviados / leadsParaEnviar.length) * 100).toFixed(1) + '%');
  console.log('‚è±Ô∏è  Dura√ß√£o:', duracaoMinutos > 0 ? duracaoMinutos + ' minutos' : duracaoSegundos + ' segundos');
  console.log('üïê In√≠cio:', inicioCampanha.toLocaleTimeString('pt-BR'));
  console.log('üïê Fim:', fimCampanha.toLocaleTimeString('pt-BR'));
  console.log('========================================\n');
  
  console.log('üì± PR√ìXIMOS PASSOS:');
  console.log('1. Os leads receber√£o o template no WhatsApp');
  console.log('2. Quando clicarem em "VER RESULTADOS", o webhook √© acionado');
  console.log('3. O diagn√≥stico completo √© enviado automaticamente');
  console.log('4. Monitore os resultados: npm run verify:prod\n');
  
  if (totalErros > 0) {
    console.log('‚ö†Ô∏è  ATEN√á√ÉO:');
    console.log(`   ${totalErros} leads falharam no envio`);
    console.log('   Reenviar: npm run send:prod (s√≥ reenvia os que falharam)\n');
  }
  
  if (LIMITE_TESTE) {
    console.log('üí° PARA ENVIAR PARA TODOS:');
    console.log('   Edite: const LIMITE_TESTE = null;\n');
  }
}

// ========================================
// EXECUTAR
// ========================================
enviarEmLotes().catch(error => {
  console.error('\n‚ùå ERRO CR√çTICO:', error.message);
  console.error('Stack:', error.stack);
  process.exit(1);
});