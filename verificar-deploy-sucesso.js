/**
 * Verificar se deploy do hotfix foi bem-sucedido
 * Deve buscar logs recentes de WhatsApp para confirmar que erros pararam
 */

require('dotenv').config({ path: '.env.production' });
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.REACT_APP_SUPABASE_URL,
  process.env.REACT_APP_SUPABASE_KEY
);

async function verificarDeploySucesso() {
  console.log('\nüîç VERIFICANDO STATUS P√ìS-DEPLOY\n');
  console.log('='.repeat(60));

  try {
    // 1. Buscar √∫ltimas mensagens WhatsApp (√∫ltimos 30 minutos)
    const agora = new Date();
    const trintaMinutosAtras = new Date(agora.getTime() - 30 * 60 * 1000);
    
    console.log('\nüìã Buscando atividade WhatsApp nos √∫ltimos 30 minutos...');
    console.log(`   Desde: ${trintaMinutosAtras.toLocaleString('pt-BR')}`);
    
    const { data: mensagens, error: msgError } = await supabase
      .from('whatsapp_logs')
      .select('created_at, phone, status, error')
      .gte('created_at', trintaMinutosAtras.toISOString())
      .order('created_at', { ascending: false });

    if (msgError) {
      console.error('‚ùå Erro ao buscar mensagens:', msgError);
      return;
    }

    console.log(`\nüìä Total de mensagens: ${mensagens.length}`);

    const comErro = mensagens.filter(m => m.error);
    const errosCalculo = comErro.filter(e => 
      e.error && e.error.includes('calcularDiagnosticoCompleto')
    );
    const outrosErros = comErro.filter(e => 
      e.error && !e.error.includes('calcularDiagnosticoCompleto')
    );

    console.log(`‚úÖ Enviadas com sucesso: ${mensagens.length - comErro.length}`);
    console.log(`‚ùå Com erro: ${comErro.length}`);

    if (errosCalculo.length > 0) {
      console.log(`\n‚ùå ERROS DE calcularDiagnosticoCompleto: ${errosCalculo.length}`);
      errosCalculo.slice(0, 3).forEach(e => {
        const hora = new Date(e.created_at).toLocaleTimeString('pt-BR');
        console.log(`   - ${hora} | ${e.phone}`);
        console.log(`     ${e.error.substring(0, 80)}...`);
      });
      console.log('\n‚ö†Ô∏è C√ìDIGO ANTIGO AINDA ATIVO! Deploy n√£o propagou!');
    } else {
      console.log('\n‚úÖ NENHUM ERRO de calcularDiagnosticoCompleto!');
    }

    if (outrosErros.length > 0) {
      console.log(`\n‚ÑπÔ∏è Outros erros (n√£o relacionados ao hotfix): ${outrosErros.length}`);
      outrosErros.slice(0, 2).forEach(e => {
        const hora = new Date(e.created_at).toLocaleTimeString('pt-BR');
        console.log(`   - ${hora} | ${e.phone}`);
        console.log(`     ${(e.error || '').substring(0, 60)}...`);
      });
    }

    // 2. Verificar leads que tiveram erro antes do deploy
    console.log('\n\nüë• VERIFICANDO LEADS COM ERRO ANTERIOR\n');
    console.log('='.repeat(60));

    const leadsComErro = [
      { nome: 'Edna Martins', phone: '+5511975129828' },
      { nome: 'Jos√© Aiko Marinho', email: 'AIKOMARINHO@GMAIL.COM' }
    ];

    for (const lead of leadsComErro) {
      console.log(`\nüîç ${lead.nome}:`);
      
      let { data: leadData, error: leadError } = await supabase
        .from('quiz_leads')
        .select('id, nome, telefone, email, diagnostico_completo, script_abertura')
        .or(lead.phone ? `telefone.eq.${lead.phone}` : `email.ilike.${lead.email}`)
        .single();

      if (leadError || !leadData) {
        console.log('   ‚ùå Lead n√£o encontrado');
        continue;
      }

      console.log(`   ID: ${leadData.id}`);
      console.log(`   Tel: ${leadData.telefone}`);
      console.log(`   Email: ${leadData.email}`);
      console.log(`   Diagn√≥stico: ${leadData.diagnostico_completo ? '‚úÖ TEM' : '‚ùå N√ÉO TEM'}`);
      console.log(`   Script: ${leadData.script_abertura ? '‚úÖ TEM' : '‚ùå N√ÉO TEM'}`);
      
      // Status atual
      if (leadData.diagnostico_completo || leadData.script_abertura) {
        console.log('   ‚úÖ Lead tem diagn√≥stico dispon√≠vel - webhook deve funcionar agora');
      } else {
        console.log('   ‚ö†Ô∏è Lead sem diagn√≥stico - precisa completar quiz');
      }
    }

    // 3. √öltimos 5 webhooks recebidos
    console.log('\n\nüì° √öLTIMAS ATIVIDADES DE WEBHOOK\n');
    console.log('='.repeat(60));

    const { data: ultimas, error: ultimasError } = await supabase
      .from('whatsapp_logs')
      .select('created_at, phone, status, error')
      .order('created_at', { ascending: false })
      .limit(5);

    if (!ultimasError && ultimas) {
      ultimas.forEach(m => {
        const hora = new Date(m.created_at).toLocaleString('pt-BR');
        const statusIcon = m.error ? '‚ùå' : '‚úÖ';
        const statusText = m.error ? `ERRO: ${m.error.substring(0, 50)}...` : m.status;
        console.log(`${statusIcon} ${hora} | ${m.phone}`);
        console.log(`   ${statusText}`);
      });
    }

    // 4. Resumo final
    console.log('\n\nüìä RESUMO DO STATUS\n');
    console.log('='.repeat(60));
    console.log('Deploy ID: 336fdf6 (CURRENT)');
    console.log('Commit: DEPLOY: For√ßar redeploy Vercel');
    console.log(`Mensagens √∫ltimos 30min: ${mensagens.length}`);
    console.log(`Erros calcularDiagnosticoCompleto: ${errosCalculo.length}`);
    console.log(`Outros erros: ${outrosErros.length}`);
    
    if (errosCalculo.length === 0) {
      console.log('\nüéâ STATUS: HOTFIX APLICADO COM SUCESSO! üéâ');
      console.log('‚úÖ Erros de calcularDiagnosticoCompleto pararam!');
      console.log('‚úÖ Webhook funcionando normalmente.');
      console.log('\nüí° Pr√≥ximos passos:');
      console.log('   1. Monitorar logs por mais 15-30 minutos');
      console.log('   2. Verificar se novos leads conseguem receber diagn√≥stico');
      console.log('   3. Documentar incidente para postmortem');
    } else {
      console.log('\n‚ö†Ô∏è STATUS: AGUARDAR PROPAGA√á√ÉO');
      console.log('‚è≥ Deploy pode levar alguns minutos para propagar.');
      console.log('üìã Executar este script novamente em 5 minutos.');
    }

  } catch (error) {
    console.error('\n‚ùå Erro ao verificar status:', error);
  }
}

verificarDeploySucesso();
