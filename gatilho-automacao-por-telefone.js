// gatilho-automacao-por-telefone.js
// Busca lead no Supabase por telefone e envia template via gatilho

const { createClient } = require('@supabase/supabase-js');
const { normalizePhone } = require('./api/utils/phone');

// const isProduction = process.env.NODE_ENV === 'production';
// const envFile = isProduction ? '.env.production' : '.env.staging';

const isProduction = true; // <- FORCE TRUE
const envFile = '.env.production'; // <- FORCE PRODUCTION

require('dotenv').config({ path: envFile });

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const GATILHO_URL = process.env.UNNICHAT_GATILHO_URL;

// Validar vari√°veis
if (!supabaseUrl || !supabaseKey || !GATILHO_URL) {
  console.error('‚ùå ERRO: Vari√°veis de ambiente n√£o configuradas!');
  console.error('   Verifique: SUPABASE_URL, SUPABASE_KEY, UNNICHAT_GATILHO_URL');
  console.error('   Arquivo:', envFile);
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// ========================================
// üéØ CONFIGURE O TELEFONE AQUI
// ========================================
const TELEFONE = '11998457676'; // ‚Üê MUDE SEU N√öMERO AQUI

// ========================================
// FUN√á√ÉO PRINCIPAL
// ========================================

async function gatilhoAutomacaoPorTelefone() {
  console.log('\nüìû ========================================');
  console.log('   GATILHO AUTOMA√á√ÉO POR TELEFONE');
  console.log('========================================');
  console.log('üîß Ambiente:', isProduction ? 'üî¥ PRODU√á√ÉO' : 'üü° STAGING');
  console.log('üîó Supabase:', supabaseUrl);
  console.log('üì± Telefone buscado:', TELEFONE);
  console.log('========================================\n');
  
  try {
    // Normalizar telefone
    const phoneNormalized = normalizePhone(TELEFONE);
    console.log('üîç Telefone normalizado:', phoneNormalized);
    console.log('üîç Buscando lead no Supabase...\n');
    
    // Buscar lead no banco
    const { data: lead, error } = await supabase
      .from('quiz_leads')
      .select('*')
      .eq('celular', phoneNormalized)
      .single();
    
    if (error) {
      console.error('‚ùå Erro ao buscar lead:', error.message);
      
      // Tentar buscar leads similares
      console.log('\nüí° Buscando leads similares...');
      const { data: similares } = await supabase
        .from('quiz_leads')
        .select('nome, celular, email, whatsapp_status')
        .ilike('celular', `%${phoneNormalized.slice(-8)}%`)
        .limit(5);
      
      if (similares && similares.length > 0) {
        console.log('\nüìã Leads encontrados com n√∫meros similares:');
        similares.forEach((l, i) => {
          console.log(`   ${i+1}. ${l.nome} - ${l.celular} - ${l.whatsapp_status}`);
        });
      } else {
        console.log('\n‚ùå Nenhum lead encontrado com esse telefone!');
        console.log('\nüí° Primeiros 10 leads do banco:');
        
        const { data: allLeads } = await supabase
          .from('quiz_leads')
          .select('nome, celular, whatsapp_status')
          .order('created_at', { ascending: false })
          .limit(10);
        
        allLeads?.forEach((l, i) => {
          console.log(`   ${i+1}. ${l.nome} - ${l.celular} - ${l.whatsapp_status}`);
        });
      }
      
      return;
    }
    
    if (!lead) {
      console.log('‚ùå Lead n√£o encontrado!\n');
      return;
    }
    
    // Lead encontrado!
    console.log('‚úÖ Lead encontrado!');
    console.log('========================================');
    console.log('üë§ Nome:', lead.nome);
    console.log('üì± Celular:', lead.celular);
    console.log('üìß Email:', lead.email);
    console.log('üéØ Elemento:', lead.elemento_principal || 'N/A');
    console.log('üìä Lead Score:', lead.lead_score || 0);
    console.log('üìç Status WhatsApp:', lead.whatsapp_status || 'AGUARDANDO_CONTATO');
    
    if (lead.whatsapp_sent_at) {
      console.log('üìÖ √öltimo envio:', new Date(lead.whatsapp_sent_at).toLocaleString('pt-BR'));
    }
    
    if (lead.whatsapp_attempts) {
      console.log('üîÑ Tentativas:', lead.whatsapp_attempts);
    }
    
    console.log('========================================\n');
    
    // Aviso se j√° recebeu
    if (lead.whatsapp_status === 'template_enviado' || lead.whatsapp_status === 'resultados_enviados') {
      console.log('‚ö†Ô∏è  ATEN√á√ÉO: Este lead j√° recebeu template!');
      console.log('   Status atual:', lead.whatsapp_status);
      console.log('   Enviando novamente em 3 segundos...\n');
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
    
    // Preparar dados para o gatilho
    const phoneForUnnichat = `55${lead.celular}`;
    
    const leadData = {
      name: lead.nome,
      email: lead.email || `${lead.celular}@placeholder.com`,
      phone: phoneForUnnichat
    };
    
    console.log('üì§ Enviando template via gatilho...');
    console.log('üîó URL:', GATILHO_URL);
    console.log('üìã Dados:');
    console.log('   ‚Ä¢ Nome:', leadData.name);
    console.log('   ‚Ä¢ Email:', leadData.email);
    console.log('   ‚Ä¢ Phone:', leadData.phone);
    console.log('');
    
    // Enviar via gatilho
    const response = await fetch(GATILHO_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(leadData)
    });
    
    const result = await response.json();
    
    console.log('üì• Resposta do gatilho:');
    console.log(JSON.stringify(result, null, 2));
    console.log('');
    
    if (response.ok || result.success || result.response !== false) {
      console.log('‚úÖ Template enviado com sucesso!\n');
      
      // Atualizar status no banco
      const { error: updateError } = await supabase
        .from('quiz_leads')
        .update({
          whatsapp_status: 'template_enviado',
          whatsapp_sent_at: new Date().toISOString(),
          whatsapp_attempts: (lead.whatsapp_attempts || 0) + 1
        })
        .eq('id', lead.id);
      
      if (updateError) {
        console.log('‚ö†Ô∏è  Aviso: N√£o foi poss√≠vel atualizar status:', updateError.message);
      } else {
        console.log('‚úÖ Status atualizado no Supabase');
      }
      
      // Registrar log
      const { error: logError } = await supabase.from('whatsapp_logs').insert({
        lead_id: lead.id,
        phone: lead.celular,
        status: 'template_enviado',
        metadata: { 
          gatilho_response: result,
          manual_send: true,
          script: 'gatilho-automacao-por-telefone.js'
        },
        sent_at: new Date().toISOString()
      });
      
      if (!logError) {
        console.log('‚úÖ Log registrado');
      }
      
      console.log('\nüéØ PR√ìXIMOS PASSOS:');
      console.log('1. üì± Verifique o WhatsApp:', phoneForUnnichat);
      console.log('2. üîò O lead deve clicar em "VER RESULTADOS"');
      console.log('3. ‚ö° O webhook enviar√° o diagn√≥stico automaticamente');
      console.log('4. üîç Monitore com: npm run verify:' + (isProduction ? 'prod' : 'test'));
      console.log('');
      
    } else {
      console.error('‚ùå Erro ao enviar template!');
      console.error('Detalhes:', result);
      
      // Salvar erro no banco
      await supabase
        .from('quiz_leads')
        .update({
          whatsapp_status: 'failed',
          whatsapp_error: JSON.stringify(result),
          whatsapp_attempts: (lead.whatsapp_attempts || 0) + 1
        })
        .eq('id', lead.id);
      
      console.log('\n‚ö†Ô∏è  Status atualizado para "failed" no banco');
    }
    
  } catch (error) {
    console.error('\n‚ùå ERRO:', error.message);
    console.error('Stack:', error.stack);
  }
}

// Executar
gatilhoAutomacaoPorTelefone();